from collections import defaultdict

# Step 1: Read graph from user input
def read_graph_from_user():
    graph = defaultdict(list)
    num_edges = int(input("Enter the number of edges: "))
    
    print("Enter each edge in the format: source destination")
    for _ in range(num_edges):
        u, v = input().split()
        graph[u].append(v)
        graph[v].append(u)  # because the graph is undirected
    
    return graph

# Step 2: Non-Recursive DFS implementation using a stack
def dfs_non_recursive(graph, start_node):
    visited = set()
    stack = [start_node]
    
    while stack:
        node = stack.pop()
        if node not in visited:
            print(node, end=' ')  # Process the node
            visited.add(node)
            
            # Push neighbors to stack (reverse for consistent traversal order)
            for neighbor in reversed(graph[node]):
                if neighbor not in visited:
                    stack.append(neighbor)

# Step 3: Run the program
graph = read_graph_from_user()
print("\nGraph:", dict(graph))

start_node = input("\nEnter the starting node for DFS traversal: ")
print("\nNon-Recursive DFS Traversal:")
dfs_non_recursive(graph, start_node)

Enter the number of edges: 5
Enter each edge in the format: source destination
A B
A C
B D
C D
C E

Graph: {'A': ['B', 'C'], 'B': ['A', 'D'], 'C': ['A', 'D', 'E'], 'D': ['B', 'C'], 'E': ['C']}

Enter the starting node for DFS traversal: A

Non-Recursive DFS Traversal:
A C E D B

1. FUNCTION read_graph_from_user():
    a. Initialize an empty graph as a dictionary with lists
    b. INPUT number of edges (n)
    c. FOR i from 1 to n:
        i. INPUT source and destination
        ii. Add destination to source's adjacency list
        iii. Add source to destination's adjacency list (since the graph is undirected)
    d. RETURN graph

2. FUNCTION dfs_non_recursive(graph, start_node):
    a. Initialize an empty set visited
    b. Initialize stack with start_node
    c. WHILE stack is not empty:
        i. Pop a node from the stack
        ii. IF node is not in visited:
            - Print (or process) the node
            - Mark node as visited
            - FOR each neighbor of node in reversed order:
                - IF neighbor not visited:
                    - Push neighbor onto the stack

3. MAIN:
    a. Call read_graph_from_user() to get the graph
    b. INPUT start_node
    c. Call dfs_non_recursive(graph, start_node)

Step 1: Read Graph
Initialize an empty adjacency list.

Input the total number of edges.

For each edge:

Input the source and destination.

Add an edge from source to destination and destination to source.

Step 2: DFS Traversal Using Stack
Initialize an empty visited set.

Initialize a stack and push the starting node into it.

While the stack is not empty:

Pop the top node from the stack.

If the node has not been visited:

Process (print) the node.

Add the node to the visited set.

For each neighbor of the node (in reversed order for consistent traversal):

If the neighbor is not visited:

Push the neighbor into the stack.

Step 3: Main Execution
Build the graph from user input.

Input the start node for traversal.

Perform DFS traversal starting from the start node.
