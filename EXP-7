from queue import PriorityQueue
from collections import defaultdict

# Step 1: Read directed weighted graph from user input
def read_graph_from_user():
    graph = defaultdict(list)
    num_edges = int(input("Enter the number of edges: "))
    
    print("Enter each edge in the format: source destination weight")
    for _ in range(num_edges):
        u, v, w = input().split()
        w = int(w)
        graph[u].append((v, w))  # Directed edge with weight
    
    return graph

# Step 2: Read heuristic values from user input
def read_heuristics_from_user():
    heuristics = {}
    num_nodes = int(input("\nEnter the number of nodes for heuristic values: "))
    
    print("Enter each node and its heuristic value in the format: node value")
    for _ in range(num_nodes):
        node, h = input().split()
        heuristics[node] = int(h)
    
    return heuristics

# Step 3: Best First Search algorithm
def best_first_search(graph, heuristics, start, goal):
    visited = set()
    pq = PriorityQueue()
    pq.put((heuristics[start], start))  # Priority based on heuristic value
    
    while not pq.empty():
        h, node = pq.get()
        if node not in visited:
            print(node, end=' ')  # Process the node
            visited.add(node)
            
            if node == goal:
                print("\nGoal reached!")
                return
            
            for neighbor, weight in graph[node]:
                if neighbor not in visited:
                    pq.put((heuristics[neighbor], neighbor))
    
    print("\nGoal not reachable.")

# Step 4: Run the program
graph = read_graph_from_user()
heuristics = read_heuristics_from_user()

print("\nGraph:", dict(graph))
print("Heuristics:", heuristics)

start_node = input("\nEnter the starting node: ")
goal_node = input("Enter the goal node: ")

print("\nBest First Search Traversal:")
best_first_search(graph, heuristics, start_node, goal_node)

Enter the number of edges: 5
Enter each edge in the format: source destination weight
A B 2
A C 3
B D 4
C D 1
D E 5

Enter the number of nodes for heuristic values: 5
Enter each node and its heuristic value in the format: node value
A 10
B 8
C 5
D 3
E 0

Graph: {'A': [('B', 2), ('C', 3)], 'B': [('D', 4)], 'C': [('D', 1)], 'D': [('E', 5)], 'E': []}
Heuristics: {'A': 10, 'B': 8, 'C': 5, 'D': 3, 'E': 0}

Enter the starting node: A
Enter the goal node: E

Best First Search Traversal:
A C D E
Goal reached!

FUNCTION read_graph_from_user():
    Initialize an empty dictionary 'graph'
    INPUT number_of_edges
    FOR i from 1 to number_of_edges:
        INPUT source, destination, weight
        Add (destination, weight) to graph[source]
    RETURN graph

FUNCTION read_heuristics_from_user():
    Initialize an empty dictionary 'heuristics'
    INPUT number_of_nodes
    FOR i from 1 to number_of_nodes:
        INPUT node, heuristic_value
        heuristics[node] = heuristic_value
    RETURN heuristics

FUNCTION best_first_search(graph, heuristics, start_node, goal_node):
    Initialize an empty set 'visited'
    Initialize a priority queue 'pq'
    Insert (heuristics[start_node], start_node) into pq

    WHILE pq is not empty:
        Pop (heuristic_value, node) with lowest heuristic value from pq
        IF node NOT IN visited:
            Print node
            Add node to visited
            
            IF node == goal_node:
                Print "Goal reached"
                RETURN

            FOR each (neighbor, weight) in graph[node]:
                IF neighbor NOT IN visited:
                    Insert (heuristics[neighbor], neighbor) into pq

    Print "Goal not reachable"

Step 1: Read the Graph
Initialize an empty graph as an adjacency list (using a dictionary).

Input the number of edges.

For each edge:

Read the source, destination, and weight.

Add the destination node with its weight to the adjacency list of the source node.

Step 2: Read Heuristic Values
Initialize an empty heuristics dictionary.

Input the number of nodes.

For each node:

Read the node name and its heuristic value.

Store the node and its heuristic value in the heuristics dictionary.

Step 3: Best First Search Traversal
Initialize an empty visited set to track nodes that have been expanded.

Initialize a priority queue.

Insert the start node into the priority queue with its heuristic value.

While the priority queue is not empty:

Remove the node with the lowest heuristic value from the queue.

If the node is not visited:

Process (print) the node.

Add the node to the visited set.

If the node is the goal node, print "Goal reached!" and terminate the search.

Otherwise, for each unvisited neighbor of the current node, add it to the queue with its heuristic value.

Step 4: Goal Not Found
If the priority queue is exhausted and the goal node is not found, print "Goal not reachable."
